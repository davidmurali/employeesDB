// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/database_interface.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	database "employeesDB/pkg/database"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBInterface is a mock of DBInterface interface.
type MockDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBInterfaceMockRecorder
}

// MockDBInterfaceMockRecorder is the mock recorder for MockDBInterface.
type MockDBInterfaceMockRecorder struct {
	mock *MockDBInterface
}

// NewMockDBInterface creates a new mock instance.
func NewMockDBInterface(ctrl *gomock.Controller) *MockDBInterface {
	mock := &MockDBInterface{ctrl: ctrl}
	mock.recorder = &MockDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBInterface) EXPECT() *MockDBInterfaceMockRecorder {
	return m.recorder
}

// CreateEmployee mocks base method.
func (m *MockDBInterface) CreateEmployee(emp *database.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEmployee", emp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEmployee indicates an expected call of CreateEmployee.
func (mr *MockDBInterfaceMockRecorder) CreateEmployee(emp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEmployee", reflect.TypeOf((*MockDBInterface)(nil).CreateEmployee), emp)
}

// DeleteEmployee mocks base method.
func (m *MockDBInterface) DeleteEmployee(id int) (*database.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmployee", id)
	ret0, _ := ret[0].(*database.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEmployee indicates an expected call of DeleteEmployee.
func (mr *MockDBInterfaceMockRecorder) DeleteEmployee(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmployee", reflect.TypeOf((*MockDBInterface)(nil).DeleteEmployee), id)
}

// GetEmployeeByID mocks base method.
func (m *MockDBInterface) GetEmployeeByID(id int) (*database.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeByID", id)
	ret0, _ := ret[0].(*database.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeByID indicates an expected call of GetEmployeeByID.
func (mr *MockDBInterfaceMockRecorder) GetEmployeeByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeByID", reflect.TypeOf((*MockDBInterface)(nil).GetEmployeeByID), id)
}

// UpdateEmployee mocks base method.
// func (m *MockDBInterface) UpdateEmployee(id int) (*database.Employee, error) {
// 	m.ctrl.T.Helper()
// 	ret := m.ctrl.Call(m, "UpdateEmployee", id)
// 	ret0, _ := ret[0].(*database.Employee)
// 	ret1, _ := ret[1].(error)
// 	return ret0, ret1
// }
func (m *MockDBInterface) UpdateEmployee(emp *database.Employee) (*database.Employee, error) {
    m.ctrl.T.Helper()
    ret := m.ctrl.Call(m, "UpdateEmployee", emp)
    ret0, _ := ret[0].(*database.Employee)
    ret1, _ := ret[1].(error)
    return ret0, ret1
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockDBInterfaceMockRecorder) UpdateEmployee(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockDBInterface)(nil).UpdateEmployee), id)
}
